# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import epic_image_pb2 as epic__image__pb2


class epic_post_processStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.filter_and_save = channel.unary_unary(
                '/epic_post_process/filter_and_save',
                request_serializer=epic__image__pb2.epic_image.SerializeToString,
                response_deserializer=epic__image__pb2.empty.FromString,
                )
        self.filter_and_save_chunk = channel.stream_unary(
                '/epic_post_process/filter_and_save_chunk',
                request_serializer=epic__image__pb2.epic_image.SerializeToString,
                response_deserializer=epic__image__pb2.empty.FromString,
                )
        self.fetch_watchlist = channel.unary_unary(
                '/epic_post_process/fetch_watchlist',
                request_serializer=epic__image__pb2.empty.SerializeToString,
                response_deserializer=epic__image__pb2.watchlist.FromString,
                )
        self.watch_source = channel.unary_unary(
                '/epic_post_process/watch_source',
                request_serializer=epic__image__pb2.watchsourceinfo.SerializeToString,
                response_deserializer=epic__image__pb2.status.FromString,
                )


class epic_post_processServicer(object):
    """Missing associated documentation comment in .proto file."""

    def filter_and_save(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def filter_and_save_chunk(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fetch_watchlist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def watch_source(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_epic_post_processServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'filter_and_save': grpc.unary_unary_rpc_method_handler(
                    servicer.filter_and_save,
                    request_deserializer=epic__image__pb2.epic_image.FromString,
                    response_serializer=epic__image__pb2.empty.SerializeToString,
            ),
            'filter_and_save_chunk': grpc.stream_unary_rpc_method_handler(
                    servicer.filter_and_save_chunk,
                    request_deserializer=epic__image__pb2.epic_image.FromString,
                    response_serializer=epic__image__pb2.empty.SerializeToString,
            ),
            'fetch_watchlist': grpc.unary_unary_rpc_method_handler(
                    servicer.fetch_watchlist,
                    request_deserializer=epic__image__pb2.empty.FromString,
                    response_serializer=epic__image__pb2.watchlist.SerializeToString,
            ),
            'watch_source': grpc.unary_unary_rpc_method_handler(
                    servicer.watch_source,
                    request_deserializer=epic__image__pb2.watchsourceinfo.FromString,
                    response_serializer=epic__image__pb2.status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'epic_post_process', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class epic_post_process(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def filter_and_save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epic_post_process/filter_and_save',
            epic__image__pb2.epic_image.SerializeToString,
            epic__image__pb2.empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def filter_and_save_chunk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/epic_post_process/filter_and_save_chunk',
            epic__image__pb2.epic_image.SerializeToString,
            epic__image__pb2.empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fetch_watchlist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epic_post_process/fetch_watchlist',
            epic__image__pb2.empty.SerializeToString,
            epic__image__pb2.watchlist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def watch_source(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epic_post_process/watch_source',
            epic__image__pb2.watchsourceinfo.SerializeToString,
            epic__image__pb2.status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
